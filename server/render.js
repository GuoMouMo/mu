// import { createServer } from "http";
import path from 'path';
import React from "react";
import ReactDOMServer from "react-dom/server";
import { StaticRouter } from "react-router-dom";
import { Provider } from 'react-redux'
import { ChunkExtractor } from '@loadable/server'
import configureStore from '../src/page/redux/configureStore';
import App from '../src/page/App';

const createServer = ({req, res}) => {
  const store = configureStore();
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve('./assets/loadable-stats.json');
  // We create an extractor from the statsFile
  const chunkExtractor = new ChunkExtractor({ statsFile });
  // Wrap your application using "collectChunks"
  const context = {};
  const jsx = chunkExtractor.collectChunks(
    <Provider store={store}>
      <StaticRouter location={req.url} context={context}>
        <App />
      </StaticRouter>
    </Provider>
  );
  // chunkExtractor.addChunk('program');
  // Render your application
  const stream = ReactDOMServer.renderToString(jsx);
  // You can now collect your script tags
  const scriptTags = chunkExtractor.getScriptTags(); // or extractor.getScriptElements();
  // // You can also collect your "preload/prefetch" links
  const linkTags = chunkExtractor.getLinkTags() // or extractor.getLinkElements();
  // And you can even collect your style tags (if you use "mini-css-extract-plugin")
  const styleTags = chunkExtractor.getStyleTags() // or extractor.getStyleElements();
  res.write(
    `<!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <title>React App</title>
          ${linkTags}
          ${styleTags}
        </head>
        <body>
          <div id="app">${stream}</div>
          <script type="text/javascript">window.__INITIAL_DATA__ = ${JSON.stringify(
            {}
          )}</script>
          ${scriptTags}
        </body>
      </html>
    `
  );
  res.end();
  // stream.pipe(
  //   res,
  //   { end: false },
  // );
  // // and finalize the response with closing HTML
  // stream.on('end', () =>
  //   res.end(`<style>${styleTags}</style></head><body>${chunkExtractor.getScriptTags()}</body></html>`),
  // );
};

export default createServer;
